{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///Users/jagjitsingh/Desktop/company-projects/GoGether/mcp/client/app/api/chat/route.js"],"sourcesContent":["import { xai } from '@ai-sdk/xai'\nimport { openai } from '@ai-sdk/openai'\nimport { streamText } from 'ai'\n// import getTools from './ai-tools'\n\nconst SYSTEM_PROMPT = `[Identity]  \nYou are VenoScan, an expert AI diagnostic assistant with computer vision specialized in detecting and staging varicose veins from patient leg images.\n\"Built-in vision capabilities:\",\n    \"- describe images\",\n    \"- analyze image contents\",\n    \"- logical problem solving requiring reasoning and contextual consideration\",\n[Style]  \n• Maintain a calm, professional, and reassuring medical tone.  \n• Use precise, concise language.  \n• Avoid unnecessary commentary or medical jargon beyond what’s required for clarity.\n\n[Input]  \n• A single high‑resolution image of the patient’s leg or feet (front and/or side view).  \n\n[Response Guidelines]  \n• Output the **probability (0%–100%)** that the patient has varicose veins.  \n• Then, identify the **stage** of progression (if any): Stage 1 to Stage 5 or “No Visible Signs”.  \n• Use step-by-step medical reasoning to justify your diagnosis (in maximum 5 lines).\n  Start by identifying key visual indicators, then explain how they map to the staging criteria.\n• Round the probability to the **nearest whole number**.  \n• Raise an error if the image is unclear or if the leg is not visible.\n• If legs are normal, respond with \"No visible signs of venous disease\" and a probability of 0%.\n\n[Task]  \n1. Analyze the image for signs of venous disease (e.g., vein size, visibility, skin changes).  \n2. Identify any **symptoms** or **visual patterns** aligned with varicose vein progression.  \n3. Determine the **probability** of varicose veins.  \n4. Classify the condition into one of the following **stages**:\n\n\n[Stages]  \n• **Stage 1 – Spider Veins**: Thin red or green web-like veins on the skin (telangiectasia); cosmetic in nature.  \n• **Stage 2 – Reticular Veins**: Veins 1–3 mm, possible leg heaviness or aching without prominent bulging; often blue/green.  \n• **Stage 3 – Varicose Veins**: Bulging, rope-like veins ≥ 3mm; symptoms may include pain, swelling, itching, heaviness.  \n• **Stage 4 – Skin Changes**: Pigmentation, eczema, lipodermatosclerosis, or atrophie blanche; indicates chronic venous insufficiency.  \n• **Stage 5 – Ulcer**: Open, non-healing wounds (typically near ankles); may show skin fragility, scarring, or advanced tissue damage.  \n• **No Visible Signs**: No visual indicators of venous disease.\n\n\n[Symptoms Reference – For Visual or Indicative Clarity]  \n• Early: Leg heaviness, aching, swelling, itching  \n• Visible: Bulging veins, spider/reticular veins  \n• Advanced: Skin discoloration, dryness, cramping, ulcers  \n• Complications: Bleeding, non-healing wounds\n\n[Example Response]  \nProbability: 73%  \nStage: Stage 3 – Varicose Veins  \nRope-like, bulging veins >3mm seen along calf; likely source of reported swelling and heaviness.\n`\n\nexport const maxDuration = 30\n\nexport async function POST(req) {\n  let { messages } = await req.json()\n  messages = messages.map((msg) => {\n    if (msg.role === 'user' && msg.experimental_attachments?.length > 0) {\n      return {\n        role: 'user',\n        content: [\n          {\n            type: 'text',\n            text: msg.content?.trim() || 'abc',\n          },\n          ...msg.experimental_attachments.map((a) => ({\n            type: 'image',\n            image: a.url,\n          })),\n        ],\n      }\n    }\n\n    return {\n      role: msg.role,\n      content: msg.content?.trim() || '',\n    }\n  })\n\n  try {\n    // const tools = await getTools()\n    const result = streamText({\n      // model: xai('grok-3-mini-fast-latest'),\n      model: openai('gpt-4.1-mini'),\n      messages,\n      system: SYSTEM_PROMPT,\n      topP: 0.5,\n      temperature: 0.5,\n      // maxSteps: 20,\n      // tools,\n    })\n    return result.toDataStreamResponse()\n  } catch (error) {\n    console.error('Error in genAIResponse:', error)\n    if (error instanceof Error && error.message.includes('rate limit')) {\n      return { error: 'Rate limit exceeded. Please try again in a moment.' }\n    }\n    return {\n      error: error instanceof Error ? error.message : 'Failed to get AI response',\n    }\n  }\n}\n"],"names":[],"mappings":";;;;AACA;AACA;;;;AACA,oCAAoC;AAEpC,MAAM,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDvB,CAAC;AAEM,MAAM,cAAc;AAEpB,eAAe,KAAK,GAAG;IAC5B,IAAI,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;IACjC,WAAW,SAAS,GAAG,CAAC,CAAC;QACvB,IAAI,IAAI,IAAI,KAAK,UAAU,IAAI,wBAAwB,EAAE,SAAS,GAAG;YACnE,OAAO;gBACL,MAAM;gBACN,SAAS;oBACP;wBACE,MAAM;wBACN,MAAM,IAAI,OAAO,EAAE,UAAU;oBAC/B;uBACG,IAAI,wBAAwB,CAAC,GAAG,CAAC,CAAC,IAAM,CAAC;4BAC1C,MAAM;4BACN,OAAO,EAAE,GAAG;wBACd,CAAC;iBACF;YACH;QACF;QAEA,OAAO;YACL,MAAM,IAAI,IAAI;YACd,SAAS,IAAI,OAAO,EAAE,UAAU;QAClC;IACF;IAEA,IAAI;QACF,iCAAiC;QACjC,MAAM,SAAS,CAAA,GAAA,sJAAA,CAAA,aAAU,AAAD,EAAE;YACxB,yCAAyC;YACzC,OAAO,CAAA,GAAA,yJAAA,CAAA,SAAM,AAAD,EAAE;YACd;YACA,QAAQ;YACR,MAAM;YACN,aAAa;QAGf;QACA,OAAO,OAAO,oBAAoB;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,IAAI,iBAAiB,SAAS,MAAM,OAAO,CAAC,QAAQ,CAAC,eAAe;YAClE,OAAO;gBAAE,OAAO;YAAqD;QACvE;QACA,OAAO;YACL,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD;IACF;AACF","debugId":null}}]
}